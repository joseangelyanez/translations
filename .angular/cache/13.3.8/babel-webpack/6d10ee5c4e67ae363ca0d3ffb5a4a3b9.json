{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { translations, works } from 'src/resources/data';\nimport * as i0 from \"@angular/core\";\nexport let DataFacadeService = /*#__PURE__*/(() => {\n  class DataFacadeService {\n    constructor() {\n      this.works$ = new BehaviorSubject(works);\n      this.translations$ = new BehaviorSubject(translations);\n      this.paragraphs$ = new BehaviorSubject(undefined);\n      this.selectedParagraph$ = new BehaviorSubject(undefined);\n    }\n\n    getWorks() {\n      return this.works$;\n    }\n\n    getTranslations() {\n      return this.translations$;\n    }\n\n    getTranslation() {\n      if (this.selectedTranslation$ == null) this.selectedTranslation$ = new BehaviorSubject(translations[0]);\n      return this.selectedTranslation$;\n    }\n\n    getParagraphs() {\n      return this.paragraphs$;\n    }\n\n    getAvailableTranslations(workId) {\n      return translations.filter(n => n.workId == workId);\n    }\n\n    getAvailableParagraphs() {\n      var _a, _b;\n\n      const selectedTranslation = (_a = this.selectedTranslation$) === null || _a === void 0 ? void 0 : _a.value;\n      if (selectedTranslation == null) return [];\n      if (selectedTranslation.paragraphs == null) return [];\n      return (_b = selectedTranslation.paragraphs) === null || _b === void 0 ? void 0 : _b.map(n => {\n        var _a;\n\n        return Object.assign(Object.assign({}, n), {\n          selected: ((_a = this._selectedParagraph) === null || _a === void 0 ? void 0 : _a.name) == n.name\n        });\n      });\n    }\n\n    searchParagraphs(searchText) {\n      var _a, _b;\n\n      const availableParagraphs = this.getAvailableParagraphs();\n\n      if (searchText == null || searchText == \"\") {\n        (_a = this.paragraphs$) === null || _a === void 0 ? void 0 : _a.next(availableParagraphs);\n        return;\n      }\n\n      const result = availableParagraphs === null || availableParagraphs === void 0 ? void 0 : availableParagraphs.filter(n => {\n        var _a;\n\n        return ((_a = n.content.map(o => {\n          var _a;\n\n          return (_a = o.text + o.tooltip) !== null && _a !== void 0 ? _a : \"\";\n        }) + n.name + n.paraphrase) !== null && _a !== void 0 ? _a : \"\").toLocaleLowerCase().indexOf(searchText.toLocaleLowerCase()) >= 0;\n      });\n      (_b = this.paragraphs$) === null || _b === void 0 ? void 0 : _b.next(result);\n    }\n\n    selectParagraph(paragraph) {\n      var _a, _b;\n\n      this._selectedParagraph = paragraph;\n      const currentlyVisibleParagraphs = (_a = this.paragraphs$) === null || _a === void 0 ? void 0 : _a.value;\n      if (currentlyVisibleParagraphs == null) return;\n      const visibleParagraphs = currentlyVisibleParagraphs.map(n => Object.assign(Object.assign({}, n), {\n        selected: n.name == paragraph.name\n      }));\n      (_b = this.paragraphs$) === null || _b === void 0 ? void 0 : _b.next(visibleParagraphs);\n      this.selectedParagraph$.next(paragraph);\n    }\n\n    getSelectedParagraphSibling(distance) {\n      var _a;\n\n      if (this._selectedParagraph == null) return null;\n      const paragraphs = (_a = this.paragraphs$) === null || _a === void 0 ? void 0 : _a.getValue();\n      if (paragraphs == null) return null;\n      const currentIndex = paragraphs.findIndex(n => {\n        var _a;\n\n        return n.name == ((_a = this._selectedParagraph) === null || _a === void 0 ? void 0 : _a.name);\n      });\n      if (currentIndex == null) return null;\n      const nextParagraph = paragraphs[currentIndex + distance];\n      return nextParagraph;\n    }\n\n    selectNextParagraph() {\n      const nextParagraph = this.getSelectedParagraphSibling(1);\n      if (nextParagraph == null) return;\n      this.selectParagraph(nextParagraph);\n    }\n\n    selectPreviousParagraph() {\n      const previousParagraph = this.getSelectedParagraphSibling(-1);\n      if (previousParagraph == null) return;\n      this.selectParagraph(previousParagraph);\n    }\n\n    selectTranslation(translation) {\n      var _a;\n\n      (_a = this.selectedTranslation$) === null || _a === void 0 ? void 0 : _a.next(translation);\n      this.paragraphs$.next(translation.paragraphs);\n      if (translation.paragraphs == null) return;\n      this.selectParagraph(translation.paragraphs[0]);\n    }\n\n    selectNoWork() {\n      var _a, _b, _c;\n\n      (_a = this.works$) === null || _a === void 0 ? void 0 : _a.next(works.map(n => Object.assign(Object.assign({}, n), {\n        selected: false\n      })));\n      (_b = this.selectedWork$) === null || _b === void 0 ? void 0 : _b.next(null);\n      (_c = this.selectedTranslation$) === null || _c === void 0 ? void 0 : _c.next(undefined);\n    }\n\n    selectWork(work) {\n      var _a, _b, _c, _d;\n\n      (_a = this.works$) === null || _a === void 0 ? void 0 : _a.next(works.map(n => Object.assign(Object.assign({}, n), {\n        selected: n.id == work.id\n      })));\n      (_b = this.selectedWork$) === null || _b === void 0 ? void 0 : _b.next(Object.assign({}, work));\n      (_c = this.selectedTranslation$) === null || _c === void 0 ? void 0 : _c.next(undefined);\n      (_d = this.translations$) === null || _d === void 0 ? void 0 : _d.next(this.getAvailableTranslations(work.id));\n      this._selectedParagraph = null;\n    }\n\n    selectTranslationByUrlId(workName, translationUrlId) {\n      const matchedWorks = works.filter(work => work.id == workName);\n      this.selectWork(matchedWorks[0]);\n      const matchedTranslations = translations.filter(translation => translation.urlId == translationUrlId && translation.workId == workName);\n\n      if (matchedTranslations.length > 0) {\n        this.selectTranslation(matchedTranslations[0]);\n      }\n    }\n\n    selectWorkById(workId) {\n      const matchedWorks = works.filter(n => n.id == workId);\n\n      if (matchedWorks.length > 0) {\n        this.selectWork(matchedWorks[0]);\n      }\n    }\n\n    getSelectedWork() {\n      if (this.selectedWork$ == null) {\n        this.selectedWork$ = new BehaviorSubject(null);\n      }\n\n      return this.selectedWork$;\n    }\n\n    getSelectedTranslation() {\n      if (this.selectedTranslation$ == null) {\n        this.selectedTranslation$ = new BehaviorSubject(undefined);\n      }\n\n      return this.selectedTranslation$;\n    }\n\n    getSelectedParagraph() {\n      return this.selectedParagraph$;\n    }\n\n  }\n\n  DataFacadeService.ɵfac = function DataFacadeService_Factory(t) {\n    return new (t || DataFacadeService)();\n  };\n\n  DataFacadeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataFacadeService,\n    factory: DataFacadeService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataFacadeService;\n})();","map":null,"metadata":{},"sourceType":"module"}